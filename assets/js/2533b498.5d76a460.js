"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[349],{5995:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=t(5893),i=t(1151);const s={},r="API Exception's",a={id:"philosophy/api-exception",title:"API Exception's",description:"This text introduces our philosophy about using API Exceptions to handle errors when writing django REST API's.",source:"@site/docs/philosophy/api-exception.md",sourceDirName:"philosophy",slug:"/philosophy/api-exception",permalink:"/django-rest-framework-supertest/docs/philosophy/api-exception",draft:!1,unlisted:!1,editUrl:"https://github.com/inventare/django-rest-framework-supertest/tree/main/docs/docs/philosophy/api-exception.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Philosophy",permalink:"/django-rest-framework-supertest/docs/category/philosophy"},next:{title:"Authentication Behaviour",permalink:"/django-rest-framework-supertest/docs/philosophy/authentication-behaviour"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Example",id:"example",level:3},{value:"One customizable APIException vs Multiple APIException",id:"one-customizable-apiexception-vs-multiple-apiexception",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"api-exceptions",children:"API Exception's"}),"\n",(0,o.jsx)(n.p,{children:"This text introduces our philosophy about using API Exceptions to handle errors when writing django REST API's."}),"\n",(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.p,{children:"One of the possibles way to handle errors in django rest framework REST API's is writing manual responses on views, like that:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from rest_framework.views import APIView\nfrom rest_framework.response import Response\n\nclass SomeAPIView(APIView):\n    def post(self, request):\n        if not condition:\n            return Response({ 'detail': 'my any error', }, status=422)\n"})}),"\n",(0,o.jsx)(n.p,{children:"or, without using early-return:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from rest_framework.views import APIView\nfrom rest_framework.response import Response\n\nclass SomeAPIView(APIView):\n    def post(self, request):\n        if condition:\n            # process here\n        else:\n            return Response({ 'detail': 'my any error', }, status=422)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This is not a good way of handle errors with django rest framework, specially for our package, because whe need to assert manually the response body and status. A other side of the problem is the cognitive load of multiple responses returning in one view function. The ",(0,o.jsx)(n.code,{children:"APIException"})," concept solve the both problems."]}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.p,{children:"The example bellow does the same logic, and return an 422 response with an detail if condition is false, like the above methods:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from rest_framework.exceptions import APIException\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\nclass CustomAPIException(APIException):\n    default_detail = 'my any error'\n    status_code = status.HTTP_422_UNPROCESSABLE_ENTITY\n\n\nclass SomeAPIView(APIView):\n    def post(self, request):\n        if not condition:\n            raise CustomAPIException()\n        # process request\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"one-customizable-apiexception-vs-multiple-apiexception",children:"One customizable APIException vs Multiple APIException"}),"\n",(0,o.jsxs)(n.p,{children:["One example of using customizable ",(0,o.jsx)(n.code,{children:"APIException"})," is present on the ",(0,o.jsx)(n.code,{children:"rest_framework_simplejwt"})," package:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# ...\nclass TokenObtainSerializer(serializers.Serializer):\n    # ...\n    default_error_messages = {\n        "no_active_account": _("No active account found with the given credentials")\n    }\n\n    def validate(self, attrs: Dict[str, Any]) -> Dict[Any, Any]:\n        # ...\n        if not api_settings.USER_AUTHENTICATION_RULE(self.user):\n            raise exceptions.AuthenticationFailed(\n                self.error_messages["no_active_account"],\n                "no_active_account",\n            )\n        # ...\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For the purpose of this testing utilities package, using this way is a little bad for some reasons: this moves the detail and codes to the ",(0,o.jsx)(n.code,{children:"APIView"})," or ",(0,o.jsx)(n.code,{children:"Serializer"})," and, then, make the code a little more verbose than writing one APIException for each error and add more cognitive load on this code."]}),"\n",(0,o.jsx)(n.p,{children:"For this testing package, this is a little bad because we need to redeclare this exceptions inside our tests, like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from django.utils.translation import gettext_lazy as _\nfrom rest_framework_simplejwt.serializers import TokenObtainSerializer\nfrom rest_framework_simplejwt.exceptions import AuthenticationFailed\nfrom rest_framework.exceptions import AuthenticationFailed as BaseAuthenticationFailed\n\nNO_ACTIVE_ACCOUNT = BaseAuthenticationFailed(\n    TokenObtainSerializer.default_error_messages["no_active_account"],\n    "no_active_account",\n)\n\nTWO_AUTORIZATION_PARTS = AuthenticationFailed(\n    _("Authorization header must contain two space-delimited values"),\n    code="bad_authorization_header",\n)\n\n# ...\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var o=t(7294);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);