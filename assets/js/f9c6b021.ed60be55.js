"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[469],{9221:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>h,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var n=o(5893),i=o(1151);const s={},r="Authentication Behaviour",a={id:"philosophy/authentication-behaviour",title:"Authentication Behaviour",description:"This text introduces our philosophy about authentication behaviour testing inside django REST API's.",source:"@site/docs/philosophy/authentication-behaviour.md",sourceDirName:"philosophy",slug:"/philosophy/authentication-behaviour",permalink:"/django-rest-framework-supertest/docs/philosophy/authentication-behaviour",draft:!1,unlisted:!1,editUrl:"https://github.com/inventare/django-rest-framework-supertest/tree/main/docs/docs/philosophy/authentication-behaviour.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"API Exception's",permalink:"/django-rest-framework-supertest/docs/philosophy/api-exception"},next:{title:"Architeture Decision Records",permalink:"/django-rest-framework-supertest/docs/category/architeture-decision-records"}},h={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Our Philosophy",id:"our-philosophy",level:2},{value:"Techinical Part",id:"techinical-part",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",hr:"hr",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"authentication-behaviour",children:"Authentication Behaviour"}),"\n",(0,n.jsx)(t.p,{children:"This text introduces our philosophy about authentication behaviour testing inside django REST API's."}),"\n",(0,n.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"APIClient"})," present at the ",(0,n.jsx)(t.code,{children:"APITestCase"})," of the ",(0,n.jsx)(t.strong,{children:"django"})," and ",(0,n.jsx)(t.strong,{children:"django-rest-framework"})," provides two methods to work with authentication: ",(0,n.jsx)(t.code,{children:"login()"})," and ",(0,n.jsx)(t.code,{children:"force_login()"})," with two different behaviours. The first method uses the configured django authentication back-end's (equivalent of adapter design pattern, for non-django developers)."]}),"\n",(0,n.jsxs)(t.p,{children:["As, we comented above, this methods uses the default ",(0,n.jsx)(t.strong,{children:"django"})," session authentication, because those methods are writen by default client and not by ",(0,n.jsx)(t.strong,{children:"django-rest-framework"})," or by ",(0,n.jsx)(t.strong,{children:"djangorestframework-simplejwt"}),", for jwt authentication-based API's."]}),"\n",(0,n.jsxs)(t.p,{children:["For example, this methods are good mehtods for testing the ",(0,n.jsx)(t.strong,{children:"django-admin"})," Ajax API Views, like the ",(0,n.jsx)(t.code,{children:"AutocompleteJsonView"})," (",(0,n.jsx)(t.a,{href:"https://github.com/django/django/blob/main/django/contrib/admin/views/autocomplete.py#L8C7-L8C27",children:"ref"}),") but are not effective for testing API's with JWT, Basic or Token model authentication-based API's."]}),"\n",(0,n.jsx)(t.h2,{id:"our-philosophy",children:"Our Philosophy"}),"\n",(0,n.jsxs)(t.p,{children:["Our philosophy about testing with JWT Authentication, or other Authorization header based method, is test all the behaviour of authentication inside the aplication with real use-cases. To made this work a little bit easy, we decided to introduce ",(0,n.jsx)(t.strong,{children:"authentication"})," helpers for the ",(0,n.jsx)(t.code,{children:"APITestCase"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"The helper is configurable and the agnostic methods and assertions are defined inside an mixin."}),"\n",(0,n.jsx)(t.h2,{id:"techinical-part",children:"Techinical Part"}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.p,{children:"TODO: write technical part for this text."})]})}function u(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,o)=>{o.d(t,{Z:()=>a,a:()=>r});var n=o(7294);const i={},s=n.createContext(i);function r(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);