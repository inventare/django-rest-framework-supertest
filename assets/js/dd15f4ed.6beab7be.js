"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[258],{281:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=r(5893),n=r(1151);const o={},i="ADR 0001: Faker Shortcuts",a={id:"adr/faker-shortcuts",title:"ADR 0001: Faker Shortcuts",description:"October 2023 . Eduardo Oliveira",source:"@site/docs/adr/0000-faker-shortcuts.md",sourceDirName:"adr",slug:"/adr/faker-shortcuts",permalink:"/django-rest-framework-supertest/docs/adr/faker-shortcuts",draft:!1,unlisted:!1,editUrl:"https://github.com/inventare/django-rest-framework-supertest/tree/main/docs/docs/adr/0000-faker-shortcuts.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Architeture Decision Records",permalink:"/django-rest-framework-supertest/docs/category/architeture-decision-records"}},d={},c=[{value:"Context",id:"context",level:2},{value:"Decision Drivers",id:"decision-drivers",level:2},{value:"Decision",id:"decision",level:2},{value:"Related Issues",id:"related-issues",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"adr-0001-faker-shortcuts",children:"ADR 0001: Faker Shortcuts"}),"\n",(0,s.jsxs)(t.p,{children:["October 2023 . ",(0,s.jsx)(t.a,{href:"https://github.com/EduardoJM",children:"Eduardo Oliveira"})]}),"\n",(0,s.jsx)(t.h2,{id:"context",children:"Context"}),"\n",(0,s.jsxs)(t.p,{children:["When we introduced the ",(0,s.jsx)(t.a,{href:"https://faker.readthedocs.io/",children:"faker"})," inside this project, we decided to use only one ",(0,s.jsx)(t.code,{children:"faker.Faker"})," instance for all model generations. The reason for this is to grant the ",(0,s.jsx)(t.code,{children:"faker.unique"})," generated values are really unique for various models context with the possibility to clear the ",(0,s.jsx)(t.a,{href:"https://faker.readthedocs.io/en/master/fakerclass.html#unique-values",children:"already seen values"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["To use only one ",(0,s.jsx)(t.code,{children:"faker.Fake"})," instance we decided to parse this as the ",(0,s.jsx)(t.strong,{children:"first argument"})," of the functions to generate field values. To made it more easy to write generator for model fields, we need to write shortcuts for the faker."]}),"\n",(0,s.jsx)(t.h2,{id:"decision-drivers",children:"Decision Drivers"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Easy to set the methods in the ",(0,s.jsx)(t.code,{children:"@faker_fields"})," decorator."]}),"\n",(0,s.jsx)(t.li,{children:"The shortcuts can receive arguments to configure the faker methods."}),"\n",(0,s.jsx)(t.li,{children:"Must include the most part of standard providers of the faker."}),"\n",(0,s.jsx)(t.li,{children:"The shortcuts should be used to directly set the value to an field."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"decision",children:"Decision"}),"\n",(0,s.jsxs)(t.p,{children:["We decided to write shortcuts (this name is an inspiration from the original ",(0,s.jsx)(t.code,{children:"django.shortcuts"})," package) with the format bellow, with the optional named ",(0,s.jsx)(t.code,{children:"**kwargs"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'def country_code(fake, representation=\'alpha-2\'):\n    """Generate a country code"""\n    return fake.country_code(representation=representation)\n'})}),"\n",(0,s.jsxs)(t.p,{children:["To use the shortcuts is very easy, using the ",(0,s.jsx)(t.code,{children:"@faker_fields"})," decorator:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"from django.db import models\nfrom rest_framework_supertest import shortcuts\nfrom rest_framework_supertest.models.decorators import faker_fields\n\n@faker_fields(\n    title=shortcuts.name,\n    mime=(shortcuts.mime_type, { 'category': 'audio' })\n)\nclass Book(models.Model):\n    title = models.CharField()\n    mime = models.TextField()\n"})}),"\n",(0,s.jsx)(t.h2,{id:"related-issues",children:"Related Issues"}),"\n",(0,s.jsx)(t.p,{children:"When this ADR was created, we have some related issues for this decision:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/inventare/django-rest-framework-supertest/issues/21",children:"#21 [feature] create an shortcut module and define methods to basic faker methods"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/inventare/django-rest-framework-supertest/issues/45",children:"#45 [feature] add support for parsing arguments to fake function"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/inventare/django-rest-framework-supertest/issues/47",children:"#47 [documentation] explain better arguments of faker shortcuts"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/inventare/django-rest-framework-supertest/issues/62",children:"#62 [feature] create shortcuts for file generation faker with real support for directly set model files"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/inventare/django-rest-framework-supertest/issues/63",children:"#63 [feature] create json shortcuts"})}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1151:(e,t,r)=>{r.d(t,{Z:()=>a,a:()=>i});var s=r(7294);const n={},o=s.createContext(n);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);