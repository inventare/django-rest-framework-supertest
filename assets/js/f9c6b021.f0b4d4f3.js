"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[469],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},l="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=c(n),d=r,m=l["".concat(p,".").concat(d)]||l[d]||h[d]||i;return n?o.createElement(m,a(a({ref:t},u),{},{components:n})):o.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[l]="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8362:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const i={},a="Authentication Behaviour",s={unversionedId:"philosophy/authentication-behaviour",id:"philosophy/authentication-behaviour",title:"Authentication Behaviour",description:"This text introduces our philosophy about authentication behaviour testing inside django REST API's.",source:"@site/docs/philosophy/authentication-behaviour.md",sourceDirName:"philosophy",slug:"/philosophy/authentication-behaviour",permalink:"/django-rest-framework-supertest/docs/philosophy/authentication-behaviour",draft:!1,editUrl:"https://github.com/inventare/django-rest-framework-supertest/tree/main/docs/docs/philosophy/authentication-behaviour.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"API Exception's",permalink:"/django-rest-framework-supertest/docs/philosophy/api-exception"},next:{title:"Architeture Decision Records",permalink:"/django-rest-framework-supertest/docs/category/architeture-decision-records"}},p={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Our Philosophy",id:"our-philosophy",level:2},{value:"Techinical Part",id:"techinical-part",level:2}],u={toc:c},l="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(l,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"authentication-behaviour"},"Authentication Behaviour"),(0,r.kt)("p",null,"This text introduces our philosophy about authentication behaviour testing inside django REST API's."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"APIClient")," present at the ",(0,r.kt)("inlineCode",{parentName:"p"},"APITestCase")," of the ",(0,r.kt)("strong",{parentName:"p"},"django")," and ",(0,r.kt)("strong",{parentName:"p"},"django-rest-framework")," provides two methods to work with authentication: ",(0,r.kt)("inlineCode",{parentName:"p"},"login()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"force_login()")," with two different behaviours. The first method uses the configured django authentication back-end's (equivalent of adapter design pattern, for non-django developers)."),(0,r.kt)("p",null,"As, we comented above, this methods uses the default ",(0,r.kt)("strong",{parentName:"p"},"django")," session authentication, because those methods are writen by default client and not by ",(0,r.kt)("strong",{parentName:"p"},"django-rest-framework")," or by ",(0,r.kt)("strong",{parentName:"p"},"djangorestframework-simplejwt"),", for jwt authentication-based API's."),(0,r.kt)("p",null,"For example, this methods are good mehtods for testing the ",(0,r.kt)("strong",{parentName:"p"},"django-admin")," Ajax API Views, like the ",(0,r.kt)("inlineCode",{parentName:"p"},"AutocompleteJsonView")," (",(0,r.kt)("a",{parentName:"p",href:"https://github.com/django/django/blob/main/django/contrib/admin/views/autocomplete.py#L8C7-L8C27"},"ref"),") but are not effective for testing API's with JWT, Basic or Token model authentication-based API's."),(0,r.kt)("h2",{id:"our-philosophy"},"Our Philosophy"),(0,r.kt)("p",null,"Our philosophy about testing with JWT Authentication, or other Authorization header based method, is test all the behaviour of authentication inside the aplication with real use-cases. To made this work a little bit easy, we decided to introduce ",(0,r.kt)("strong",{parentName:"p"},"authentication")," helpers for the ",(0,r.kt)("inlineCode",{parentName:"p"},"APITestCase"),"."),(0,r.kt)("p",null,"The helper is configurable and the agnostic methods and assertions are defined inside an mixin."),(0,r.kt)("h2",{id:"techinical-part"},"Techinical Part"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"TODO: write technical part for this text."))}h.isMDXComponent=!0}}]);