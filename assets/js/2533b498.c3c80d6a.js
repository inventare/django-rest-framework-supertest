"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[349],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return n?o.createElement(f,a(a({ref:t},c),{},{components:n})):o.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5915:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const i={},a="API Exception's",s={unversionedId:"philosophy/api-exception",id:"philosophy/api-exception",title:"API Exception's",description:"This text introduces our philosophy about using API Exceptions to handle errors when writing django REST API's.",source:"@site/docs/philosophy/api-exception.md",sourceDirName:"philosophy",slug:"/philosophy/api-exception",permalink:"/django-rest-framework-supertest/docs/philosophy/api-exception",draft:!1,editUrl:"https://github.com/inventare/django-rest-framework-supertest/tree/main/docs/docs/philosophy/api-exception.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Philosophy",permalink:"/django-rest-framework-supertest/docs/category/philosophy"},next:{title:"Authentication Behaviour",permalink:"/django-rest-framework-supertest/docs/philosophy/authentication-behaviour"}},p={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Example",id:"example",level:3},{value:"One customizable APIException vs Multiple APIException",id:"one-customizable-apiexception-vs-multiple-apiexception",level:2}],c={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"api-exceptions"},"API Exception's"),(0,r.kt)("p",null,"This text introduces our philosophy about using API Exceptions to handle errors when writing django REST API's."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"One of the possibles way to handle errors in django rest framework REST API's is writing manual responses on views, like that:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from rest_framework.views import APIView\nfrom rest_framework.response import Response\n\nclass SomeAPIView(APIView):\n    def post(self, request):\n        if not condition:\n            return Response({ 'detail': 'my any error', }, status=422)\n")),(0,r.kt)("p",null,"or, without using early-return:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from rest_framework.views import APIView\nfrom rest_framework.response import Response\n\nclass SomeAPIView(APIView):\n    def post(self, request):\n        if condition:\n            # process here\n        else:\n            return Response({ 'detail': 'my any error', }, status=422)\n")),(0,r.kt)("p",null,"This is not a good way of handle errors with django rest framework, specially for our package, because whe need to assert manually the response body and status. A other side of the problem is the cognitive load of multiple responses returning in one view function. The ",(0,r.kt)("inlineCode",{parentName:"p"},"APIException")," concept solve the both problems."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"The example bellow does the same logic, and return an 422 response with an detail if condition is false, like the above methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from rest_framework.exceptions import APIException\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\nclass CustomAPIException(APIException):\n    default_detail = 'my any error'\n    status_code = status.HTTP_422_UNPROCESSABLE_ENTITY\n\n\nclass SomeAPIView(APIView):\n    def post(self, request):\n        if not condition:\n            raise CustomAPIException()\n        # process request\n\n")),(0,r.kt)("h2",{id:"one-customizable-apiexception-vs-multiple-apiexception"},"One customizable APIException vs Multiple APIException"),(0,r.kt)("p",null,"One example of using customizable ",(0,r.kt)("inlineCode",{parentName:"p"},"APIException")," is present on the ",(0,r.kt)("inlineCode",{parentName:"p"},"rest_framework_simplejwt")," package:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# ...\nclass TokenObtainSerializer(serializers.Serializer):\n    # ...\n    default_error_messages = {\n        "no_active_account": _("No active account found with the given credentials")\n    }\n\n    def validate(self, attrs: Dict[str, Any]) -> Dict[Any, Any]:\n        # ...\n        if not api_settings.USER_AUTHENTICATION_RULE(self.user):\n            raise exceptions.AuthenticationFailed(\n                self.error_messages["no_active_account"],\n                "no_active_account",\n            )\n        # ...\n')),(0,r.kt)("p",null,"For the purpose of this testing utilities package, using this way is a little bad for some reasons: this moves the detail and codes to the ",(0,r.kt)("inlineCode",{parentName:"p"},"APIView")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Serializer")," and, then, make the code a little more verbose than writing one APIException for each error and add more cognitive load on this code."),(0,r.kt)("p",null,"For this testing package, this is a little bad because we need to redeclare this exceptions inside our tests, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from django.utils.translation import gettext_lazy as _\nfrom rest_framework_simplejwt.serializers import TokenObtainSerializer\nfrom rest_framework_simplejwt.exceptions import AuthenticationFailed\nfrom rest_framework.exceptions import AuthenticationFailed as BaseAuthenticationFailed\n\nNO_ACTIVE_ACCOUNT = BaseAuthenticationFailed(\n    TokenObtainSerializer.default_error_messages["no_active_account"],\n    "no_active_account",\n)\n\nTWO_AUTORIZATION_PARTS = AuthenticationFailed(\n    _("Authorization header must contain two space-delimited values"),\n    code="bad_authorization_header",\n)\n\n# ...\n')))}m.isMDXComponent=!0}}]);