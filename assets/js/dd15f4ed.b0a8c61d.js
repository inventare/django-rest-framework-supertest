"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[258],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),u=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(r),f=n,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||o;return r?a.createElement(m,s(s({ref:t},c),{},{components:r})):a.createElement(m,s({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:n,s[1]=i;for(var u=2;u<o;u++)s[u]=r[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},1997:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var a=r(7462),n=(r(7294),r(3905));const o={},s="ADR 0001: Faker Shortcuts",i={unversionedId:"adr/faker-shortcuts",id:"adr/faker-shortcuts",title:"ADR 0001: Faker Shortcuts",description:"October 2023 . Eduardo Oliveira",source:"@site/docs/adr/0000-faker-shortcuts.md",sourceDirName:"adr",slug:"/adr/faker-shortcuts",permalink:"/django-rest-framework-supertest/docs/adr/faker-shortcuts",draft:!1,editUrl:"https://github.com/inventare/django-rest-framework-supertest/tree/main/docs/docs/adr/0000-faker-shortcuts.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Architeture Decision Records",permalink:"/django-rest-framework-supertest/docs/category/architeture-decision-records"}},l={},u=[{value:"Context",id:"context",level:2},{value:"Decision Drivers",id:"decision-drivers",level:2},{value:"Decision",id:"decision",level:2},{value:"Related Issues",id:"related-issues",level:2}],c={toc:u},d="wrapper";function p(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"adr-0001-faker-shortcuts"},"ADR 0001: Faker Shortcuts"),(0,n.kt)("p",null,"October 2023 . ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/EduardoJM"},"Eduardo Oliveira")),(0,n.kt)("h2",{id:"context"},"Context"),(0,n.kt)("p",null,"When we introduced the ",(0,n.kt)("a",{parentName:"p",href:"https://faker.readthedocs.io/"},"faker")," inside this project, we decided to use only one ",(0,n.kt)("inlineCode",{parentName:"p"},"faker.Faker")," instance for all model generations. The reason for this is to grant the ",(0,n.kt)("inlineCode",{parentName:"p"},"faker.unique")," generated values are really unique for various models context with the possibility to clear the ",(0,n.kt)("a",{parentName:"p",href:"https://faker.readthedocs.io/en/master/fakerclass.html#unique-values"},"already seen values"),"."),(0,n.kt)("p",null,"To use only one ",(0,n.kt)("inlineCode",{parentName:"p"},"faker.Fake")," instance we decided to parse this as the ",(0,n.kt)("strong",{parentName:"p"},"first argument")," of the functions to generate field values. To made it more easy to write generator for model fields, we need to write shortcuts for the faker."),(0,n.kt)("h2",{id:"decision-drivers"},"Decision Drivers"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Easy to set the methods in the ",(0,n.kt)("inlineCode",{parentName:"li"},"@faker_fields")," decorator."),(0,n.kt)("li",{parentName:"ul"},"The shortcuts can receive arguments to configure the faker methods."),(0,n.kt)("li",{parentName:"ul"},"Must include the most part of standard providers of the faker."),(0,n.kt)("li",{parentName:"ul"},"The shortcuts should be used to directly set the value to an field.")),(0,n.kt)("h2",{id:"decision"},"Decision"),(0,n.kt)("p",null,"We decided to write shortcuts (this name is an inspiration from the original ",(0,n.kt)("inlineCode",{parentName:"p"},"django.shortcuts")," package) with the format bellow, with the optional named ",(0,n.kt)("inlineCode",{parentName:"p"},"**kwargs"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'def country_code(fake, representation=\'alpha-2\'):\n    """Generate a country code"""\n    return fake.country_code(representation=representation)\n')),(0,n.kt)("p",null,"To use the shortcuts is very easy, using the ",(0,n.kt)("inlineCode",{parentName:"p"},"@faker_fields")," decorator:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from django.db import models\nfrom rest_framework_supertest import shortcuts\nfrom rest_framework_supertest.models.decorators import faker_fields\n\n@faker_fields(\n    title=shortcuts.name,\n    mime=(shortcuts.mime_type, { 'category': 'audio' })\n)\nclass Book(models.Model):\n    title = models.CharField()\n    mime = models.TextField()\n")),(0,n.kt)("h2",{id:"related-issues"},"Related Issues"),(0,n.kt)("p",null,"When this ADR was created, we have some related issues for this decision:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/inventare/django-rest-framework-supertest/issues/21"},"#21 [feature] create an shortcut module and define methods to basic faker methods")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/inventare/django-rest-framework-supertest/issues/45"},"#45 [feature] add support for parsing arguments to fake function")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/inventare/django-rest-framework-supertest/issues/47"},"#47 [documentation] explain better arguments of faker shortcuts")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/inventare/django-rest-framework-supertest/issues/62"},"#62 [feature] create shortcuts for file generation faker with real support for directly set model files")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/inventare/django-rest-framework-supertest/issues/63"},"#63 [feature] create json shortcuts"))))}p.isMDXComponent=!0}}]);